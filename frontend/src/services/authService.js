/**
 * Servi√ßo de Autentica√ß√£o Frontend - VERS√ÉO CORRIGIDA
 * Caminho: frontend/src/services/authService.js
 */

import api from './api';

// Constantes
const STORAGE_KEYS = {
  TOKEN: 'auth_token',
  USER: 'user_data'
};

class AuthService {
  
  /**
   * Realiza login no backend
   * @param {string} cdUsuario - C√≥digo do usu√°rio
   * @param {string} password - Senha
   * @param {number} cdMultiEmpresa - C√≥digo da empresa
   * @returns {Promise<Object>} Resultado do login
   */
  async login(cdUsuario, password, cdMultiEmpresa) {
    try {
      console.log('üîê AuthService: Iniciando login...', { cdUsuario, cdMultiEmpresa });

      // ‚úÖ CORRE√á√ÉO: Campos com nomes corretos (camelCase)
      const response = await api.post('/auth/login', {
        cdUsuario: cdUsuario,           // ‚úÖ CORRETO - sem underscore
        password: password,             // ‚úÖ CORRETO
        cdMultiEmpresa: cdMultiEmpresa  // ‚úÖ CORRETO - sem underscore
      });

      console.log('üì® Resposta do backend:', response.data);

      if (response.data.success) {
        const { user, token } = response.data.data;

        // ‚úÖ Salva no localStorage
        this.setToken(token);
        this.setUser(user);

        console.log('‚úÖ Login bem-sucedido:', user.nome_usuario || user.cd_usuario);

        return {
          success: true,
          user: user,
          token: token
        };
      } else {
        console.warn('‚ùå Login falhou:', response.data.message);
        return {
          success: false,
          error: response.data.message || 'Credenciais inv√°lidas'
        };
      }

    } catch (error) {
      console.error('‚ùå Erro no login:', error);

      let errorMessage = 'Erro de conex√£o com o servidor';

      // Tratamento espec√≠fico de erros
      if (error.response) {
        // Erro HTTP (400, 401, 500, etc.)
        const status = error.response.status;
        const data = error.response.data;

        console.log('üîç Status do erro:', status, 'Data:', data);

        switch (status) {
          case 400:
            errorMessage = data.message || 'Dados inv√°lidos';
            break;
          case 401:
            errorMessage = data.message || 'Usu√°rio, senha ou empresa incorretos';
            break;
          case 403:
            errorMessage = 'Acesso negado';
            break;
          case 500:
            errorMessage = 'Erro interno do servidor';
            break;
          default:
            errorMessage = data.message || `Erro ${status}`;
        }
      } else if (error.request) {
        // Erro de rede
        errorMessage = 'Erro de conex√£o. Verifique se o servidor est√° online.';
        console.log('üåê Erro de rede:', error.request);
      } else {
        // Erro na configura√ß√£o da requisi√ß√£o
        errorMessage = error.message || 'Erro na configura√ß√£o da requisi√ß√£o';
        console.log('‚öôÔ∏è Erro de configura√ß√£o:', error.message);
      }

      return {
        success: false,
        error: errorMessage
      };
    }
  }

  /**
   * Realiza logout
   * @returns {Promise<Object>} Resultado do logout
   */
  async logout() {
    try {
      console.log('üö™ AuthService: Fazendo logout...');

      // ‚úÖ Chama o endpoint de logout (opcional)
      try {
        await api.post('/auth/logout');
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao notificar logout no backend:', error.message);
        // Continua o logout local mesmo com erro no backend
      }

      // ‚úÖ Remove dados locais
      this.clearAuth();

      console.log('‚úÖ Logout realizado com sucesso');

      return { success: true };

    } catch (error) {
      console.error('‚ùå Erro no logout:', error);

      // Force logout local mesmo com erro
      this.clearAuth();

      return {
        success: false,
        error: 'Erro durante logout, mas dados locais foram removidos'
      };
    }
  }

  /**
   * Verifica se o token ainda √© v√°lido
   * @returns {Promise<Object>} Resultado da verifica√ß√£o
   */
  async verifyToken() {
    try {
      const token = this.getToken();

      if (!token) {
        return { valid: false, error: 'Token n√£o encontrado' };
      }

      console.log('üîç Verificando token...');

      // ‚úÖ Chama o endpoint de verifica√ß√£o
      const response = await api.post('/auth/verify');

      if (response.data.success) {
        const { user } = response.data.data;

        // Atualiza dados do usu√°rio
        this.setUser(user);

        console.log('‚úÖ Token v√°lido:', user.nome_usuario || user.cd_usuario);

        return {
          valid: true,
          user: user
        };
      } else {
        console.warn('‚ùå Token inv√°lido:', response.data.message);
        this.clearAuth();

        return {
          valid: false,
          error: response.data.message || 'Token inv√°lido'
        };
      }

    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o do token:', error);
      this.clearAuth();

      return {
        valid: false,
        error: 'Erro ao verificar token'
      };
    }
  }

  /**
   * Salva o token no localStorage
   * @param {string} token - Token JWT
   */
  setToken(token) {
    localStorage.setItem(STORAGE_KEYS.TOKEN, token);
    
    // ‚úÖ Configura token no header da API
    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }

  /**
   * Obt√©m o token do localStorage
   * @returns {string|null} Token ou null
   */
  getToken() {
    return localStorage.getItem(STORAGE_KEYS.TOKEN);
  }

  /**
   * Salva dados do usu√°rio no localStorage
   * @param {Object} user - Dados do usu√°rio
   */
  setUser(user) {
    localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(user));
  }

  /**
   * Obt√©m dados do usu√°rio do localStorage
   * @returns {Object|null} Usu√°rio ou null
   */
  getUser() {
    try {
      const userData = localStorage.getItem(STORAGE_KEYS.USER);
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('Erro ao parsear dados do usu√°rio:', error);
      return null;
    }
  }

  /**
   * Remove todos os dados de autentica√ß√£o
   */
  clearAuth() {
    localStorage.removeItem(STORAGE_KEYS.TOKEN);
    localStorage.removeItem(STORAGE_KEYS.USER);
    
    // ‚úÖ Remove token do header da API
    delete api.defaults.headers.common['Authorization'];
  }

  /**
   * Verifica se o usu√°rio est√° autenticado
   * @returns {boolean} True se autenticado
   */
  isAuthenticated() {
    const token = this.getToken();
    const user = this.getUser();
    
    return !!(token && user);
  }

  /**
   * Inicializa o servi√ßo (configura token se existir)
   */
  initialize() {
    const token = this.getToken();
    
    if (token) {
      // ‚úÖ Configura token no header da API
      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      console.log('üîß Token configurado no header da API');
    }
  }

  /**
   * Atualiza dados do perfil do usu√°rio
   * @param {Object} profileData - Novos dados do perfil
   * @returns {Promise<Object>} Resultado da atualiza√ß√£o
   */
  async updateProfile(profileData) {
    try {
      console.log('üìù Atualizando perfil...');

      const response = await api.put('/users/profile', profileData);

      if (response.data.success) {
        const { user } = response.data.data;
        
        // Atualiza dados locais
        this.setUser(user);

        console.log('‚úÖ Perfil atualizado com sucesso');

        return {
          success: true,
          user: user
        };
      } else {
        return {
          success: false,
          error: response.data.message || 'Erro ao atualizar perfil'
        };
      }

    } catch (error) {
      console.error('‚ùå Erro ao atualizar perfil:', error);

      return {
        success: false,
        error: error.response?.data?.message || 'Erro ao atualizar perfil'
      };
    }
  }
}

// ‚úÖ Cria inst√¢ncia √∫nica e inicializa
const authService = new AuthService();
authService.initialize();

export default authService;