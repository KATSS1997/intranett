/**
 * Servi√ßo de Autentica√ß√£o - Frontend
 * Caminho: frontend/src/services/authService.js
 */

import { apiMethods, setAuthToken, clearAuth } from './api';
import { storage } from '../utils/storage';
import { STORAGE_KEYS, API_ENDPOINTS } from '../utils/constants';

class AuthService {
  /**
   * Faz login do usu√°rio
   * @param {string} cdUsuario - C√≥digo do usu√°rio
   * @param {string} password - Senha do usu√°rio
   * @param {number} cdMultiEmpresa - C√≥digo da empresa
   * @returns {Promise<Object>} Dados do usu√°rio e token
   */
  async login(cdUsuario, password, cdMultiEmpresa) {
    try {
      console.log('üîê Tentando fazer login:', { cdUsuario, cdMultiEmpresa });
      
      const response = await apiMethods.post(API_ENDPOINTS.AUTH.LOGIN, {
        cdUsuario,
        password,
        cdMultiEmpresa,
      });
      
      if (response.success) {
        const { token, user } = response.data;
        
        // Armazena token e dados do usu√°rio
        storage.set(STORAGE_KEYS.TOKEN, token);
        storage.set(STORAGE_KEYS.USER, user);
        
        // Configura header Authorization para pr√≥ximas requisi√ß√µes
        setAuthToken(token);
        
        console.log('‚úÖ Login realizado com sucesso:', user);
        
        return {
          success: true,
          user,
          token,
          message: response.message,
        };
      } else {
        throw new Error(response.message || 'Erro no login');
      }
    } catch (error) {
      console.error('‚ùå Erro no login:', error);
      
      return {
        success: false,
        error: error.message || 'Erro ao fazer login',
        code: error.code || 'LOGIN_ERROR',
      };
    }
  }
  
  /**
   * Faz logout do usu√°rio
   * @returns {Promise<Object>} Resultado do logout
   */
  async logout() {
    try {
      console.log('üö™ Fazendo logout...');
      
      // Chama endpoint de logout (opcional, para logs)
      try {
        await apiMethods.post(API_ENDPOINTS.AUTH.LOGOUT);
      } catch (error) {
        // Ignora erro do logout no servidor
        console.warn('‚ö†Ô∏è Erro no logout do servidor (ignorado):', error.message);
      }
      
      // Remove dados locais
      this.clearUserData();
      
      console.log('‚úÖ Logout realizado');
      
      return {
        success: true,
        message: 'Logout realizado com sucesso',
      };
    } catch (error) {
      console.error('‚ùå Erro no logout:', error);
      
      // Mesmo com erro, limpa dados locais
      this.clearUserData();
      
      return {
        success: true, // Sempre retorna sucesso no logout
        message: 'Logout realizado',
      };
    }
  }
  
  /**
   * Verifica se token √© v√°lido
   * @returns {Promise<Object>} Status da verifica√ß√£o
   */
  async verifyToken() {
    try {
      const token = this.getToken();
      
      if (!token) {
        return {
          valid: false,
          error: 'Token n√£o encontrado',
        };
      }
      
      const response = await apiMethods.post(API_ENDPOINTS.AUTH.VERIFY);
      
      if (response.success && response.data.valid) {
        // Atualiza dados do usu√°rio se necess√°rio
        storage.set(STORAGE_KEYS.USER, response.data.user);
        
        return {
          valid: true,
          user: response.data.user,
        };
      } else {
        // Token inv√°lido - limpa dados
        this.clearUserData();
        
        return {
          valid: false,
          error: response.message || 'Token inv√°lido',
        };
      }
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o do token:', error);
      
      // Em caso de erro, assume que token √© inv√°lido
      this.clearUserData();
      
      return {
        valid: false,
        error: error.message || 'Erro na verifica√ß√£o do token',
      };
    }
  }
  
  /**
   * Verifica se usu√°rio est√° autenticado
   * @returns {boolean} True se autenticado
   */
  isAuthenticated() {
    const token = this.getToken();
    const user = this.getUser();
    
    return !!(token && user);
  }
  
  /**
   * Obt√©m token do localStorage
   * @returns {string|null} Token JWT
   */
  getToken() {
    return storage.get(STORAGE_KEYS.TOKEN);
  }
  
  /**
   * Obt√©m dados do usu√°rio do localStorage
   * @returns {Object|null} Dados do usu√°rio
   */
  getUser() {
    return storage.get(STORAGE_KEYS.USER);
  }
  
  /**
   * Obt√©m c√≥digo do usu√°rio
   * @returns {string|null} C√≥digo do usu√°rio
   */
  getUserCode() {
    const user = this.getUser();
    return user?.cdUsuario || null;
  }
  
  /**
   * Obt√©m nome do usu√°rio
   * @returns {string|null} Nome do usu√°rio
   */
  getUserName() {
    const user = this.getUser();
    return user?.nomeUsuario || null;
  }
  
  /**
   * Obt√©m empresa do usu√°rio
   * @returns {number|null} C√≥digo da empresa
   */
  getUserCompany() {
    const user = this.getUser();
    return user?.cdMultiEmpresa || null;
  }
  
  /**
   * Obt√©m perfil do usu√°rio
   * @returns {string|null} Perfil do usu√°rio
   */
  getUserRole() {
    const user = this.getUser();
    return user?.perfil || null;
  }
  
  /**
   * Verifica se usu√°rio tem perfil espec√≠fico
   * @param {string|string[]} roles - Perfil(s) para verificar
   * @returns {boolean} True se tem o perfil
   */
  hasRole(roles) {
    const userRole = this.getUserRole();
    
    if (!userRole) {
      return false;
    }
    
    const rolesToCheck = Array.isArray(roles) ? roles : [roles];
    return rolesToCheck.some(role => 
      userRole.toLowerCase() === role.toLowerCase()
    );
  }
  
  /**
   * Verifica se usu√°rio √© admin
   * @returns {boolean} True se √© admin
   */
  isAdmin() {
    return this.hasRole(['admin', 'administrador']);
  }
  
  /**
   * Verifica se usu√°rio √© manager ou superior
   * @returns {boolean} True se √© manager+
   */
  isManager() {
    return this.hasRole(['admin', 'administrador', 'manager', 'gerente']);
  }
  
  /**
   * Limpa todos os dados do usu√°rio
   */
  clearUserData() {
    clearAuth();
    console.log('üßπ Dados do usu√°rio limpos');
  }
  
  /**
   * Renova token automaticamente (se implementado no backend)
   * @returns {Promise<Object>} Novo token
   */
  async refreshToken() {
    try {
      // Esta funcionalidade precisa ser implementada no backend
      const response = await apiMethods.post(API_ENDPOINTS.AUTH.REFRESH);
      
      if (response.success) {
        const { token } = response.data;
        
        // Atualiza token
        storage.set(STORAGE_KEYS.TOKEN, token);
        setAuthToken(token);
        
        console.log('üîÑ Token renovado com sucesso');
        
        return {
          success: true,
          token,
        };
      }
    } catch (error) {
      console.error('‚ùå Erro ao renovar token:', error);
      
      // Se n√£o conseguir renovar, faz logout
      this.clearUserData();
      
      return {
        success: false,
        error: error.message,
      };
    }
  }
}

// Inst√¢ncia √∫nica do servi√ßo
const authService = new AuthService();

export default authService;
export { AuthService };